//
//  ProfileViewController.swift
//  vkExtended
//
//  Created Ярослав Стрельников on 26.10.2020.
//  Copyright © 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import MaterialComponents
import DRPLoadingSpinner

class ProfileViewController: BaseViewController, ProfileViewProtocol {
    private let mainTable = UITableView(frame: .zero, style: .plain)
    private lazy var refreshControl = DRPRefreshControl()
    private var profileViewModel: ProfileViewModel?
    private var photosViewModel = PhotoViewModel.init(cell: [], footerTitle: nil)
    private var friendsViewModel = FriendViewModel.init(cell: [], footerTitle: nil)
    private var wallViewModel = FeedViewModel.init(cells: [], footerTitle: nil)
    private lazy var footerView = FooterView(frame: CGRect(origin: .zero, size: .custom(screenWidth, 44)))

	var presenter: ProfilePresenterProtocol?
    var userId: Int
    
    var isCurrentProfile: Bool {
        return Constants.currentUserId == userId
    }
    
    init(userId: Int) {
        self.userId = userId
        super.init(nibName: nil, bundle: nil)
        
        ProfileRouter.initModule(self)
    }
    
    required init?(coder: NSCoder) {
        self.userId = Constants.currentUserId
        super.init(nibName: nil, bundle: nil)
        
        ProfileRouter.initModule(self)
    }
    
	override func viewDidLoad() {
        super.viewDidLoad()
        presenter?.start(request: .getProfile(userId: userId))
        
        prepareTable()
        setupTable()
        
        title = "Профиль"
        
        let fullInfoButton = UIBarButtonItem(image: UIImage(named: "info_circle_outline_28")?.withRenderingMode(.alwaysTemplate).tint(with: .systemBlue), style: .plain, target: self, action: nil)
        let moreButton = UIBarButtonItem(image: UIImage(named: "more_vertical_28")?.withRenderingMode(.alwaysTemplate).tint(with: .systemBlue), style: .plain, target: self, action: nil)
        let settingsButton = UIBarButtonItem(image: UIImage(named: "menu_28")?.withRenderingMode(.alwaysTemplate).tint(with: .systemBlue), style: .plain, target: self, action: nil)
        setNavigationItems(rightNavigationItems: isCurrentProfile ? [settingsButton, moreButton, fullInfoButton] : [moreButton, fullInfoButton])
    }
    
    // Подготовка контекстного меню
    func createContextMenu() {
        
    }
    
    // Подготовка таблицы
    func prepareTable() {
        view.addSubview(mainTable)
        mainTable.autoPinEdge(toSuperviewSafeArea: .top, withInset: 56)
        mainTable.autoPinEdge(toSuperviewSafeArea: .bottom, withInset: 52)
        mainTable.autoPinEdge(.trailing, to: .trailing, of: view)
        mainTable.autoPinEdge(.leading, to: .leading, of: view)
        mainTable.tableFooterView = footerView
    }
    
    // Настройка таблицы
    func setupTable() {
        mainTable.backgroundColor = .getThemeableColor(from: .white)
        mainTable.keyboardDismissMode = .onDrag
        mainTable.separatorStyle = .singleLine
        mainTable.separatorColor = .adaptableDivider
        mainTable.delegate = self
        mainTable.dataSource = self
        mainTable.register(UINib(nibName: "ProfileMainInfoTableViewCell", bundle: nil), forCellReuseIdentifier: "ProfileMainInfoTableViewCell")
        mainTable.register(ProfilePhotosTableViewCell.self, forCellReuseIdentifier: "ProfilePhotosTableViewCell")
        mainTable.register(ProfileFriendsTableViewCell.self, forCellReuseIdentifier: "ProfileFriendsTableViewCell")
        mainTable.register(NewsFeedCell.self, forCellReuseIdentifier: NewsFeedCell.reuseId)
        refreshControl.add(to: mainTable, target: self, selector: #selector(reloadProfile))
        refreshControl.loadingSpinner.colorSequence = [.adaptableDarkGrayVK]
        refreshControl.loadingSpinner.lineWidth = 2.5
        refreshControl.loadingSpinner.rotationCycleDuration = 1
    }

    // Отобразить данные
    func displayData(viewModel: ProfileModel.ViewModel.ViewModelData) {
        switch viewModel {
        case .displayProfile(profileViewModel: let profileViewModel, photosViewModel: let photosViewModel, friendsViewModel: let friendsViewModel, wallViewModel: let wallViewModel):
            self.profileViewModel = profileViewModel
            guard let profileCellViewModel = profileViewModel.cell else { return }
            title = profileCellViewModel.screenName ?? ""
            if profileViewModel.cell!.deactivated == nil && profileCellViewModel.canAccessClosed! && !profileCellViewModel.blacklisted! {
                self.photosViewModel = photosViewModel
                self.wallViewModel = wallViewModel
                self.friendsViewModel = friendsViewModel
                let wallItemsCount = wallViewModel.cells.count > 0 ? "\(wallViewModel.cells.count) \(getStringByDeclension(number: wallViewModel.cells.count, arrayWords: Localization.instance.wallsCount))" : "Нет записей"
                footerView.footerTitle = wallItemsCount
            } else {
                footerView.footerTitle = nil
            }
            mainTable.reloadData()
            refreshControl.endRefreshing()
        case .displayProfileInfo(profileViewModel: let profileViewModel):
            title = profileViewModel.cell?.screenName
            self.profileViewModel = profileViewModel
            self.userId = profileViewModel.cell?.id ?? 0
            mainTable.reloadData()
            setupButtons(hasCurrentProfile: isCurrentProfile)
        case .displayProfilePhotos(photosViewModel: let photosViewModel):
            self.photosViewModel = photosViewModel
            mainTable.reloadData()
        case .displayProfileFriends(friendsViewModel: let friendsViewModel):
            self.friendsViewModel = friendsViewModel
            mainTable.reloadData()
            footerView.footerTitle = ""
        case .displayProfileWall(wallViewModel: let wallViewModel):
            self.wallViewModel = wallViewModel
            let wallItemsCount = wallViewModel.cells.count > 0 ? "\(wallViewModel.cells.count) \(getStringByDeclension(number: wallViewModel.cells.count, arrayWords: Localization.instance.wallsCount))" : "Нет записей"
            footerView.footerTitle = wallItemsCount
            mainTable.reloadData()
            refreshControl.endRefreshing()
        case .displayFooterLoader:
            footerView.footerTitle = nil
        case .displayFooterError(message: let message):
            refreshControl.endRefreshing()
            footerView.footerTitle = message
        }
    }
    
    // Настройка кнопок для профиля
    func setupButtons(hasCurrentProfile: Bool) {
        if hasCurrentProfile {
            appBarViewController.navigationBar.rightBarButtonItems = [UIBarButtonItem(image: UIImage(named: "edit_outline_28")?.withRenderingMode(.alwaysTemplate).tint(with: .systemBlue), style: .plain, target: self, action: nil)]
        } else {
            appBarViewController.navigationBar.rightBarButtonItems = []
        }
        appBarViewController.navigationBar.rightBarButtonItems?.append(UIBarButtonItem(image: UIImage(named: "info_circle_outline_28")?.withRenderingMode(.alwaysTemplate).tint(with: .systemBlue), style: .plain, target: self, action: nil))
    }
    
    // При обновлении страницы
    @objc func reloadProfile() {
        presenter?.start(request: .getProfile(userId: userId))
    }
    
    // MARK: NewsfeedCodeCellDelegate
    // Расширить пост
    func revealPost(for cell: NewsFeedCell) {
        guard let indexPath = mainTable.indexPath(for: cell) else { return }
        let cellViewModel = wallViewModel.cells[indexPath.row]
        if let repost = cellViewModel.repost?.first {
            presenter?.start(request: .revealPostIds(postId: repost.id))
        } else {
            presenter?.start(request: .revealPostIds(postId: cellViewModel.postId))
        }
    }
    
    // Лайк!
    func likePost(for cell: NewsFeedCell) {
        guard let indexPath = mainTable.indexPath(for: cell) else { return }
        let count = wallViewModel.cells[indexPath.row].likes?.intValue
        let newCount = (count ?? 0) + 1
        wallViewModel.cells[indexPath.row].likes = newCount.stringValue
        wallViewModel.cells[indexPath.row].userLikes = 1
        cell.set(viewModel: wallViewModel.cells[indexPath.row])
    }
    
    // Убрать лайк
    func unlikePost(for cell: NewsFeedCell) {
        guard let indexPath = mainTable.indexPath(for: cell) else { return }
        let count = wallViewModel.cells[indexPath.row].likes?.intValue
        let newCount = (count ?? 0) - 1
        wallViewModel.cells[indexPath.row].likes = newCount == 0 ? "" : newCount.stringValue
        wallViewModel.cells[indexPath.row].userLikes = 0
        cell.set(viewModel: wallViewModel.cells[indexPath.row])
    }
}
extension ProfileViewController: UITableViewDelegate, UITableViewDataSource {
    public func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        switch section {
        case 0, 1, 2:
            return 1
        case 3:
            return wallViewModel.cells.count
        default:
            return 0
        }
    }
    
    public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let model = profileViewModel, let cellModel = model.cell else { return UITableViewCell() }
        switch indexPath.section {
        case 0:
            let cell = tableView.dequeueReusableCell(withIdentifier: "ProfileMainInfoTableViewCell", for: indexPath) as! ProfileMainInfoTableViewCell
            cell.setup(by: cellModel)
            cell.selectionStyle = .none
            cell.separatorInset = .horizontal(16)
            return cell
        case 1:
            let cell = tableView.dequeueReusableCell(withIdentifier: "ProfilePhotosTableViewCell", for: indexPath) as! ProfilePhotosTableViewCell
            cell.setupCollection(photos: photosViewModel.cell)
            cell.selectionStyle = .none
            cell.separatorInset = .horizontal(16)
            return cell
        case 2:
            let cell = tableView.dequeueReusableCell(withIdentifier: "ProfileFriendsTableViewCell", for: indexPath) as! ProfileFriendsTableViewCell
            cell.setupCollection(friends: friendsViewModel.cell)
            cell.selectionStyle = .none
            cell.separatorInset = .horizontal(16)
            return cell
        case 3:
            let cell = tableView.dequeueReusableCell(withIdentifier: NewsFeedCell.reuseId, for: indexPath) as! NewsFeedCell
            let cellViewModel = wallViewModel.cells[indexPath.row]
            cell.set(viewModel: cellViewModel)
            cell.transition(.fadeOut, .scale(0.75))
            cell.delegate = self
            cell.separatorInset = .horizontal(16)
            return cell
        default:
            return UITableViewCell()
        }
    }
    
    public func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        guard photosViewModel.cell.count > 0 && friendsViewModel.cell.count > 0 else { return 0 }
        switch section {
        case 0, 3:
            return 0
        case 1, 2:
            return 12
        default:
            return 0
        }
    }
    
    public func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        switch indexPath.section {
        case 0, 1, 2:
            guard photosViewModel.cell.count > 0 && friendsViewModel.cell.count > 0 else { return 0 }
            return UITableView.automaticDimension
        case 3:
            guard let profileViewModel = profileViewModel?.cell, profileViewModel.canAccessClosed ?? false else { return 0 }
            let cellViewModel = wallViewModel.cells[indexPath.row]
            return cellViewModel.sizes.totalHeight
        default:
            return 0
        }
    }
    
    public func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: false)
    }
    
    public func numberOfSections(in tableView: UITableView) -> Int {
        return (profileViewModel?.cell?.canAccessClosed ?? false) ? 4 : 1
    }
}
extension ProfileViewController: NewsFeedCellDelegate {
    func openPhoto(for cell: NewsFeedCell, with url: String?) { }
    
    func openComments(for cell: NewsFeedCell) { }
    
    func share(for cell: NewsFeedCell) { }
}
